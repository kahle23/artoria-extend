package ${tableInfo.serviceImplPackageName};

import artoria.beans.BeanUtils;
import artoria.util.CollectionUtils;
import artoria.common.Paging;
import artoria.validate.ValidateUtils;
import artoria.util.PagingUtils;
import artoria.common.Param;
import artoria.common.Result;
import ${tableInfo.entityPackageName}.${tableInfo.entityClassName};
import ${tableInfo.mapperPackageName}.${tableInfo.mapperClassName};
import ${tableInfo.servicePackageName}.${tableInfo.serviceClassName};
import ${tableInfo.dtoPackageName}.${tableInfo.dtoClassName};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

import static artoria.exception.InternalErrorCode.*;

/**
 * ${tableInfo.serviceImplClassName}.
 * @author $!{author}
 */
@Service
public class ${tableInfo.serviceImplClassName} implements ${tableInfo.serviceClassName} {

    /* (Start) This will be covered, please do not modify. */

    @Autowired
    private ${tableInfo.mapperClassName} ${tableInfo.mapperObjectName};
    /* (End) This will be covered, please do not modify. */

    /* (Start) This will be covered, please do not modify. */

    @Override
    public Result<Boolean> insert(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ValidateUtils.notNull(${tableInfo.dtoObjectName}, PARAMETER_REQUIRED);
        Result<Boolean> result = new Result<Boolean>();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        int affect = ${tableInfo.mapperObjectName}.insert(${tableInfo.entityObjectName});
        result.setData(affect == 1);
        return result;
    }

    @Override
    public Result<Boolean> insertSelective(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ValidateUtils.notNull(${tableInfo.dtoObjectName}, PARAMETER_REQUIRED);
        Result<Boolean> result = new Result<Boolean>();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        int affect = ${tableInfo.mapperObjectName}.insertSelective(${tableInfo.entityObjectName});
        result.setData(affect == 1);
        return result;
    }

    @Override
    public Result<Integer> deleteSelective(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ValidateUtils.notNull(${tableInfo.dtoObjectName}, PARAMETER_REQUIRED);
        Result<Integer> result = new Result<Integer>();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        result.setData(${tableInfo.mapperObjectName}.deleteSelective(${tableInfo.entityObjectName}));
        return result;
    }

    @Override
    public Result<Boolean> updateByPrimaryKey(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ValidateUtils.notNull(${tableInfo.dtoObjectName}, PARAMETER_REQUIRED);
#foreach(${columnData} in ${tableInfo.columnDataList})
#if($columnData.primaryKey)        ValidateUtils.notNull(${tableInfo.dtoObjectName}.${columnData.getterName}(), PRIMARY_KEY_REQUIRED);#end
#end

        Result<Boolean> result = new Result<Boolean>();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        int affect = ${tableInfo.mapperObjectName}.updateByPrimaryKey(${tableInfo.entityObjectName});
        result.setData(affect == 1);
        return result;
    }

    @Override
    public Result<Boolean> updateByPrimaryKeySelective(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ValidateUtils.notNull(${tableInfo.dtoObjectName}, PARAMETER_REQUIRED);
#foreach(${columnData} in ${tableInfo.columnDataList})
#if($columnData.primaryKey)        ValidateUtils.notNull(${tableInfo.dtoObjectName}.${columnData.getterName}(), PRIMARY_KEY_REQUIRED);#end
#end

        Result<Boolean> result = new Result<Boolean>();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        int affect = ${tableInfo.mapperObjectName}.updateByPrimaryKeySelective(${tableInfo.entityObjectName});
        result.setData(affect == 1);
        return result;
    }

    @Override
    public Result<Integer> countSelective(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ValidateUtils.notNull(${tableInfo.dtoObjectName}, PARAMETER_REQUIRED);
        Result<Integer> result = new Result<Integer>();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        result.setData(${tableInfo.mapperObjectName}.countSelective(${tableInfo.entityObjectName}));
        return result;
    }

    @Override
    public Result<${tableInfo.dtoClassName}> queryFirst(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ValidateUtils.notNull(${tableInfo.dtoObjectName}, PARAMETER_REQUIRED);
        Result<${tableInfo.dtoClassName}> result = new Result<${tableInfo.dtoClassName}>();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        PagingUtils.startPage(new Paging(1, 1));
        List<${tableInfo.entityClassName}> list = ${tableInfo.mapperObjectName}.querySelective(${tableInfo.entityObjectName});
        ${tableInfo.entityObjectName} = CollectionUtils.isNotEmpty(list) ? list.get(0) : null;
        result.setData(${tableInfo.entityObjectName} != null
                ? BeanUtils.beanToBean(${tableInfo.entityObjectName}, ${tableInfo.dtoClassName}.class) : null);
        return result;
    }

    @Override
    public Result<List<${tableInfo.dtoClassName}>> querySelective(Param<${tableInfo.dtoClassName}> param) {
        ValidateUtils.notNull(param, NO_REQUEST_BODY);
        ${tableInfo.dtoClassName} ${tableInfo.dtoObjectName} = param.getData();
        ${tableInfo.entityClassName} ${tableInfo.entityObjectName} = ${tableInfo.dtoObjectName} == null ? new ${tableInfo.entityClassName}()
                        : BeanUtils.beanToBean(${tableInfo.dtoObjectName}, ${tableInfo.entityClassName}.class);
        PagingUtils.startPage(param.getPaging());
        List<${tableInfo.entityClassName}> list = ${tableInfo.mapperObjectName}.querySelective(${tableInfo.entityObjectName});
        return PagingUtils.handleResult(list, ${tableInfo.dtoClassName}.class);
    }
    /* (End) This will be covered, please do not modify. */
    /* Generated by artoria-extend in ${generatedTime}. */

}
