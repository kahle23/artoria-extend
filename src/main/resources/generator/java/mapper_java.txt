package ${table.mapperPackageName};

import ${table.entityPackageName}.${table.entityClassName};
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 * ${table.mapperClassName}.
 * @author $!{author}
 */
@Mapper
public interface ${table.mapperClassName} {

    /* (Start) This will be covered, please do not modify. */

    int insert(${table.entityClassName} record);

    int insertBatch(@Param("recordList") List<${table.entityClassName}> recordList);

    int insertSelective(${table.entityClassName} record);

    int deleteByPrimaryKey(#set($temp = 0)
#foreach(${column} in ${table.columnList})
#if($column.primaryKey)
#if($temp > 0), #set($temp = $temp + 1)#end#*
*#@Param("${column.fieldName}") ${column.javaType} ${column.fieldName}#end
#end);

    int deleteByPrimaryKeyList(#set($temp = 0)
#foreach(${column} in ${table.columnList})
#if($column.primaryKey)
#if($temp > 0), #set($temp = $temp + 1)#end#*
*#@Param("${column.fieldName}List") List<${column.javaType}> ${column.fieldName}List#end
#end);

    int deleteSelective(${table.entityClassName} record);

    int updateByPrimaryKey(${table.entityClassName} record);

    int updateByPrimaryKeySelective(${table.entityClassName} record);

    int countSelective(${table.entityClassName} record);

    ${table.entityClassName} queryByPrimaryKey(#set($temp = 0)
#foreach(${column} in ${table.columnList})
#if($column.primaryKey)
#if($temp > 0), #set($temp = $temp + 1)#end#*
*#@Param("${column.fieldName}") ${column.javaType} ${column.fieldName}#end
#end);

    List<${table.entityClassName}> queryByPrimaryKeyList(#set($temp = 0)
#foreach(${column} in ${table.columnList})
#if($column.primaryKey)
#if($temp > 0), #set($temp = $temp + 1)#end#*
*#@Param("${column.fieldName}List") List<${column.javaType}> ${column.fieldName}List#end
#end);

    List<${table.entityClassName}> querySelective(${table.entityClassName} record);
    /* (End) This will be covered, please do not modify. */
    /* Generated by artoria-extend in ${generatedTime}. */

}
